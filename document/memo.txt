To do List 

정보 보안 기사

국민 연금 자소서 

네트워크 보고서 등 

=================================================================

Consortium Semi-private private public 

Blockchain SSO 

OAuth 2.0   ex. 신한카드 

Document Stamping   ex. 현대 자동차 전자문서 솔루션 

표준화된 블록체인   ex. 금융보안원, 금융결제원 

아르고 프로젝트 private to public 


블록체인 1세대 2세대 차이 
2세대는 블록을 지울 수 있다, Smart Contract 

LG 경제연구원 2018년 디지털 기술 10대 이슈
Hyper-Connection 
가치의전달  cf. VR/AR : 경험의 전달 

분산원장 : 거래 정보를 기록한 원장 -> db -> computer -> ....

다수 노드가 거래 기록을 공유하므로 데이터 일부분이 손상되더라도 복구 가능

World Wide Web 

Genesis Block  Main Chain Block  Orphan Block

Full node, light node

P2P 단점 : 문제 발생시 책임 소재 모호

거래 스크립트 

컨소시엄 : R3 
프라이빗 : 나스닥 거래소

블록체인 본질  동국대 박성준 소장 

법정화폐  전자화폐  가상화폐/암호화폐

BTC/XBT

암호 기반 위에 플랫폼을 입혀서 목적에 맞게 사용하는게 요즘 추세

해외 송금

블록체인 기술 스택 
블록체인 기술의 이해와 개발 현황 및 시사점

해시 함수 

블록 구조 
트랜잭션  블록(블록헤더 + 트랜잭션)  Merkle Tree

트랜잭션 : transaction id, 입력 값(출금 계좌 UXTO), 출력 값(입금계좌 UXTO) 
채굴, 합의 알고리즘 
POW : 
POS : pow가 전력을 지나치게 소모하는 문제가 있어 이를 보완하고자 등장, 지분으로 준다 
Nonce 값 

Full node  Lightweight node  Web node

비트코인 주소

ECC -> ECDSA

Base64 -> Base58check Encode 

=================================================================

기밀성

블록체인은 기밀성을 제공하지 않지만 암호화 알고리즘을 돌려서 넣으면 된다

정보보호 기술 분류
시스템  네트워크  암호 보호기술

정보보호 제품의 라이프사이클 
*비도 : 비밀번호 관리

정보호 제품 평가
평가기관, 정책/인증기관, 사용자 

Exhaustive search or brute force attack 

round 

암호 기법 분류 : 전치암호, 환자암호, 블록 암호, 스트림 암호, 링크, 종단간 암호, 하드웨어 암호, 소프트웨어 암호 
GPU도 한계가 있다  에이직?

하이브리드 암호 시스템 

의사난수 생성기 : 1세대 비밀키 만들때 

=================================================================

https://gist.github.com/jejuro/efef79db5e0824160b2a2dcd628a31ff 

gossip protocol 

https://www.swirlds.com/downloads/SWIRLDS-TR-2016-02.pdf 

https://steemit.com/kr/@kim066/hashgraph 

네트워크 

Hybrid P2P

http 

wireshark

ftp


========================================================

Application layer를 거치지 않고 P2P로 구현
transport 단에서 끝내고 Socket으로 구현한다 
그 위에 단은 dApp으로 한다 

javac -encoding UTF-8(EUC-KR) FtpClient.java 

Socket Application : 1~65535, 3000 번 이상을 써라 

하이브리드, 퓨어 P2P

https://www.blocko.io/developers.html 

CoinStack SDK

자바 버전이 안 맞는 경우 
Java Build Path

show console 

API reference 
Blockchain status, Block, Address, Transaction, Stamp

지갑 주소 생성 순서
Private key -> public key -> wallet Address

개인키 생성 
1 ~ 2^256 사이 임의 숫자 선택 
base58check encoding 

String newPrivateKeyWIF = ECKey.createNewPrivateKey();
 System.out.println("private key: " + newPrivateKeyWIF);

String newPublicKey = Hex.encodeHexString(ECKey.derivePubKey(newPrivateKeyWIF, false)); System.out.println("public key: " + newPublicKey); 

String your_wallet_address = ECKey.deriveAddress(newPrivateKeyWIF); System.out.println("address: " + your_wallet_address); [ 14:29:47 ]

Address Balance 
현재 특정 비트코인 주소에서 다른 주소로 송금 가능한 잔액을 사토시 단위로 나타내는 객체
주소는 비트코인을 담고 있거나 OP_RETURN data를 담고 있다 
흩어져 있는 UTXO(unspent output)의 비트코인 수량을 합산하여 보여주는 기능 

long balance = client.getBalance(your_wallet_address); System.out.println("balance: " + balance); 

String[] transactionIds = client.getTransactions(your_wallet_address);
 System.out.println("transactions");
 for (String txId : transactionIds) {
 System.out.println("txIds[]: " + txId);
 }


Address Unspent Outputs : 이중 지불을 막기 위해
 Output[] outputs = client.getUnspentOutputs(your_wallet_address);
 System.out.println("unspent outputs");
 for (Output utxo : outputs) {
 System.out.println(utxo.getValue());
 }

Transaction 생성 및 서명 
일반적으로 트랜잭션은 내 주소의 잔여 비트코인을 타 주소로 전송하기 위해 사용 

String toPrivateKeyWIF = ECKey.createNewPrivateKey();
 String toAddress = ECKey.deriveAddress(toPrivateKeyWIF);
 long amount = io.blocko.coinstack.Math.convertToSatoshi("0.0002");
 long fee = io.blocko.coinstack.Math.convertToSatoshi("0.0001");

 TransactionBuilder builder = new TransactionBuilder();
 builder.addOutput(toAddress, amount);
 builder.setFee(fee);

 String rawSignedTx = client.createSignedTransaction(builder, newPrivateKeyWIF);
 System.out.println(rawSignedTx);


dust threshold 
allowDustyOutput(true)


data transaction 

sign the transaction using the private key 

client.sendTransaction(rawSignedTx); 

System.out.println(rawSignedTx);

 String transactionId = TransactionUtil.getTransactionHash(rawSignedTx);

print transaction
 Transaction tx = client.getTransaction(transactionId);
 System.out.println(tx.getConfirmationTime());

https://www.blocko.io/console.html

https://blocko-1.gitbook.io/coinstack-api-reference 


Multisig
smart contract 와 유사한 개념 
prviate key 하나가 아니라 2개 이상 또는 여러 가지 중 몇 개 이상의 방식으로 인증 가능 

meteor 

coinstack API Reference 

QR code Reader
















